/**********************************************************************
*
*   Component generated by Quest
*
*   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts. 
*   To preseve that abilty, always export from Quest to regenerate this file.
*   To setup props, bindings and actions, use the Quest editor
*   Code Logic goes in the hook associated with this component
*
*   For help and further details refer to: https://www.quest.ai/docs
*
*
**********************************************************************/

import { Alert, TextField, InputAdornment, SvgIcon, Button, Link, Autocomplete, Checkbox, FormControlLabel, Avatar, Switch } from '@mui/material';
import RemoveRedEyeFilled1 from 'public/hello/world/_RemoveRedEyeFilled.svg';
import RemoveRedEyeFilled2 from 'public/hello/world/_RemoveRedEyeFilled.svg';
import RemoveRedEyeFilled3 from 'public/hello/world/_RemoveRedEyeFilled.svg';
import ChevronRightFilled1 from 'public/hello/world/_ChevronRightFilled.svg';
import ChevronRightFilled2 from 'public/hello/world/_ChevronRightFilled.svg';
import ChevronLeftFilled1 from 'public/hello/world/_ChevronLeftFilled.svg';
import StarFilled1 from 'public/hello/world/_StarFilled.svg';
import StarHalfFilled1 from 'public/hello/world/_StarHalfFilled.svg';
import StarFilled2 from 'public/hello/world/_StarFilled.svg';
import ViewModuleFilled1 from 'public/hello/world/_ViewModuleFilled.svg';
import { styled } from '@mui/material/styles';
import Table from 'components/Table/Table';
import Badge1 from 'components/Badge1/Badge1';

 
const Mui59Test1 = styled("div")({  
  backgroundColor: `rgba(255, 255, 255, 1)`,  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `20px`,  
  boxSizing: `border-box`,  
  height: "100%",  
  width: "100%",  
});
  
const Top = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const Alerts = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const AlertFilled = styled(Alert)({  
  width: `320px`,  
  margin: `0px`,  
});
  
const AlertFilled1 = styled(Alert)({  
  width: `320px`,  
  margin: `20px 0px 0px 0px`,  
});
  
const AlertFilled2 = styled(Alert)({  
  width: `320px`,  
  margin: `20px 0px 0px 0px`,  
});
  
const AlertFilled3 = styled(Alert)({  
  width: `320px`,  
  margin: `20px 0px 0px 0px`,  
});
  
const TextFields = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px 0px 0px 30px`,  
});
  
const TextFieldStandard = styled(TextField)({  
  width: `220px`,  
  margin: `0px`,  
});
  
const TextFieldStandard1 = styled(TextField)({  
  width: `220px`,  
  margin: `30px 0px 0px 0px`,  
});
  
const TextFieldStandard2 = styled(TextField)({  
  width: `220px`,  
  margin: `30px 0px 0px 0px`,  
});
  
const TextFieldFilled = styled(TextField)({  
  width: `220px`,  
  margin: `30px 0px 0px 0px`,  
});
  
const TextFieldFilled1 = styled(TextField)({  
  width: `220px`,  
  margin: `30px 0px 0px 0px`,  
});
  
const TextFieldOutlined = styled(TextField)({  
  width: `220px`,  
  margin: `30px 0px 0px 0px`,  
});
  
const TextFieldStandard3 = styled(TextField)({  
  width: `220px`,  
  margin: `30px 0px 0px 0px`,  
});
  
const TextFieldFilled2 = styled(TextField)({  
  width: `220px`,  
  margin: `30px 0px 0px 0px`,  
});
  
const TextFieldOutlined1 = styled(TextField)({  
  width: `220px`,  
  margin: `30px 0px 0px 0px`,  
});
  
const TextFieldStandard4 = styled(TextField)({  
  width: `220px`,  
  margin: `30px 0px 0px 0px`,  
});
  
const TextFieldOutlined2 = styled(TextField)({  
  width: `220px`,  
  margin: `30px 0px 0px 0px`,  
});
  
const TextFieldFilled3 = styled(TextField)({  
  width: `220px`,  
  margin: `30px 0px 0px 0px`,  
});
  
const TextFieldStandard5 = styled(TextField)({  
  width: `220px`,  
  margin: `30px 0px 0px 0px`,  
});
  
const TextFieldOutlined3 = styled(TextField)({  
  width: `220px`,  
  margin: `30px 0px 0px 0px`,  
});
  
const TextFieldFilled4 = styled(TextField)({  
  width: `220px`,  
  margin: `30px 0px 0px 0px`,  
});
  
const Buttons = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px 0px 0px 30px`,  
});
  
const ButtonContained = styled(Button)({  
  margin: `0px`,  
});
  
const ButtonContained1 = styled(Button)({  
  margin: `10px 0px 0px 0px`,  
});
  
const ButtonContained2 = styled(Button)({  
  margin: `10px 0px 0px 0px`,  
});
  
const ButtonContained3 = styled(Button)({  
  margin: `10px 0px 0px 0px`,  
});
  
const ButtonText = styled(Button)({  
  margin: `10px 0px 0px 0px`,  
});
  
const ButtonText1 = styled(Button)({  
  margin: `10px 0px 0px 0px`,  
});
  
const ButtonText2 = styled(Button)({  
  margin: `10px 0px 0px 0px`,  
});
  
const ButtonOutlined = styled(Button)({  
  margin: `10px 0px 0px 0px`,  
});
  
const ButtonOutlined1 = styled(Button)({  
  margin: `10px 0px 0px 0px`,  
});
  
const ButtonOutlined2 = styled(Button)({  
  margin: `10px 0px 0px 0px`,  
});
  
const ButtonOutlined3 = styled(Button)({  
  margin: `10px 0px 0px 0px`,  
});
  
const ButtonContained4 = styled(Button)({  
  margin: `10px 0px 0px 0px`,  
});
  
const ButtonContained5 = styled(Button)({  
  margin: `10px 0px 0px 0px`,  
});
  
const ButtonText3 = styled(Button)({  
  margin: `10px 0px 0px 0px`,  
});
  
const ButtonText4 = styled(Button)({  
  margin: `10px 0px 0px 0px`,  
});
  
const ButtonText5 = styled(Button)({  
  margin: `10px 0px 0px 0px`,  
});
  
const ButtonOutlined4 = styled(Button)({  
  margin: `10px 0px 0px 0px`,  
});
  
const ButtonOutlined5 = styled(Button)({  
  margin: `10px 0px 0px 0px`,  
});
  
const ButtonContained6 = styled(Button)({  
  margin: `10px 0px 0px 0px`,  
});
  
const ButtonText6 = styled(Button)({  
  margin: `10px 0px 0px 0px`,  
});
  
const ButtonOutlined6 = styled(Button)({  
  margin: `10px 0px 0px 0px`,  
});
  
const Icons = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px 0px 0px 30px`,  
});
  
const Icon1 = styled(SvgIcon)(({ theme }) =>({  
  color: theme.palette["Action"]["Active (54p)"],  
  margin: `0px`,  
}));
  
const Icon2 = styled(SvgIcon)(({ theme }) =>({  
  color: theme.palette["Action"]["Active (54p)"],  
  margin: `30px 0px 0px 0px`,  
}));
  
const Icon3 = styled(SvgIcon)(({ theme }) =>({  
  color: theme.palette["Action"]["Active (54p)"],  
  margin: `30px 0px 0px 0px`,  
}));
  
const Icon4 = styled(SvgIcon)({  
  color: "unset",  
  height: `16px`,  
  width: `16px`,  
  margin: `30px 0px 0px 0px`,  
});
  
const Links = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px 0px 0px 30px`,  
});
  
const Link1 = styled(Link)(({ theme }) =>({  
  color: theme.palette["Primary"]["Main"],  
  fontStyle: theme.typography["Typography"]["Body 1"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 1"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 1"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 1"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 1"].letterSpacing,  
  lineHeight: theme.typography["Typography"]["Body 1"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 1"].textTransform,  
  margin: `0px`,  
}));
  
const Link2 = styled(Link)(({ theme }) =>({  
  color: theme.palette["Primary"]["Main"],  
  fontStyle: theme.typography["Typography"]["Body 1"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 1"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 1"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 1"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 1"].letterSpacing,  
  lineHeight: theme.typography["Typography"]["Body 1"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 1"].textTransform,  
  margin: `10px 0px 0px 0px`,  
}));
  
const Link3 = styled(Link)(({ theme }) =>({  
  color: theme.palette["Primary"]["Main"],  
  fontStyle: theme.typography["Typography"]["Body 1"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 1"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 1"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 1"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 1"].letterSpacing,  
  lineHeight: theme.typography["Typography"]["Body 1"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 1"].textTransform,  
  margin: `10px 0px 0px 0px`,  
}));
  
const Link4 = styled(Link)(({ theme }) =>({  
  color: theme.palette["Primary"]["Main"],  
  fontStyle: theme.typography["Typography"]["Body 1"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 1"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 1"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 1"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 1"].letterSpacing,  
  lineHeight: theme.typography["Typography"]["Body 1"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 1"].textTransform,  
  margin: `10px 0px 0px 0px`,  
}));
  
const Link5 = styled(Link)(({ theme }) =>({  
  color: theme.palette["Primary"]["Main"],  
  fontStyle: theme.typography["Typography"]["Body 1"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 1"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 1"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 1"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 1"].letterSpacing,  
  lineHeight: theme.typography["Typography"]["Body 1"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 1"].textTransform,  
  margin: `10px 0px 0px 0px`,  
}));
  
const Link6 = styled(Link)(({ theme }) =>({  
  color: theme.palette["Primary"]["Main"],  
  fontStyle: theme.typography["Typography"]["Body 1"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 1"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 1"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 1"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 1"].letterSpacing,  
  lineHeight: theme.typography["Typography"]["Body 1"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 1"].textTransform,  
  margin: `10px 0px 0px 0px`,  
}));
  
const Link7 = styled(Link)(({ theme }) =>({  
  color: theme.palette["Primary"]["Main"],  
  fontStyle: theme.typography["Typography"]["Body 1"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 1"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 1"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 1"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 1"].letterSpacing,  
  lineHeight: theme.typography["Typography"]["Body 1"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 1"].textTransform,  
  margin: `10px 0px 0px 0px`,  
}));
  
const AutoComplete = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px 0px 0px 30px`,  
});
  
const Autocomplete1 = styled(Autocomplete)({  
  width: `220px`,  
  margin: `0px`,  
});
  
const Autocomplete2 = styled(Autocomplete)({  
  width: `220px`,  
  margin: `10px 0px 0px 0px`,  
});
  
const Autocomplete3 = styled(Autocomplete)({  
  width: `220px`,  
  margin: `10px 0px 0px 0px`,  
});
  
const Autocomplete4 = styled(Autocomplete)({  
  width: `220px`,  
  margin: `10px 0px 0px 0px`,  
});
  
const Autocomplete5 = styled(Autocomplete)({  
  width: `220px`,  
  margin: `10px 0px 0px 0px`,  
});
  
const Autocomplete6 = styled(Autocomplete)({  
  width: `220px`,  
  margin: `10px 0px 0px 0px`,  
});
  
const Btm = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `30px 0px 0px 0px`,  
});
  
const Checkboxes = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const FormControlLabel1 = styled(FormControlLabel)({  
  margin: `0px`,  
});
  
const FormControlLabel2 = styled(FormControlLabel)({  
  margin: `30px 0px 0px 0px`,  
});
  
const FormControlLabel3 = styled(FormControlLabel)({  
  margin: `30px 0px 0px 0px`,  
});
  
const FormControlLabel4 = styled(FormControlLabel)({  
  margin: `30px 0px 0px 0px`,  
});
  
const FormControlLabel5 = styled(FormControlLabel)({  
  margin: `30px 0px 0px 0px`,  
});
  
const FormControlLabel6 = styled(FormControlLabel)({  
  margin: `30px 0px 0px 0px`,  
});
  
const FormControlLabel7 = styled(FormControlLabel)({  
  margin: `30px 0px 0px 0px`,  
});
  
const FormControlLabel8 = styled(FormControlLabel)({  
  margin: `30px 0px 0px 0px`,  
});
  
const FormControlLabel9 = styled(FormControlLabel)({  
  margin: `30px 0px 0px 0px`,  
});
  
const FormControlLabel10 = styled(FormControlLabel)({  
  margin: `30px 0px 0px 0px`,  
});
  
const FormControlLabel11 = styled(FormControlLabel)({  
  margin: `30px 0px 0px 0px`,  
});
  
const FormControlLabel12 = styled(FormControlLabel)({  
  margin: `30px 0px 0px 0px`,  
});
  
const FormControlLabel13 = styled(FormControlLabel)({  
  margin: `30px 0px 0px 0px`,  
});
  
const FormControlLabel14 = styled(FormControlLabel)({  
  margin: `30px 0px 0px 0px`,  
});
  
const FormControlLabel15 = styled(FormControlLabel)({  
  margin: `30px 0px 0px 0px`,  
});
  
const FormControlLabel16 = styled(FormControlLabel)({  
  margin: `30px 0px 0px 0px`,  
});
  
const FormControlLabel17 = styled(FormControlLabel)({  
  margin: `30px 0px 0px 0px`,  
});
  
const FormControlLabel18 = styled(FormControlLabel)({  
  margin: `30px 0px 0px 0px`,  
});
  
const FormControlLabel19 = styled(FormControlLabel)({  
  margin: `30px 0px 0px 0px`,  
});
  
const FormControlLabel20 = styled(FormControlLabel)({  
  margin: `30px 0px 0px 0px`,  
});
  
const FormControlLabel21 = styled(FormControlLabel)({  
  margin: `30px 0px 0px 0px`,  
});
  
const FormControlLabel22 = styled(FormControlLabel)({  
  margin: `30px 0px 0px 0px`,  
});
  
const FormControlLabel23 = styled(FormControlLabel)({  
  margin: `30px 0px 0px 0px`,  
});
  
const Avatar1 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px 0px 0px 30px`,  
});
  
const Avatar2 = styled(Avatar)({  
  margin: `0px`,  
  width: `40px`,  
  height: `40px`,  
});
  
const Avatar3 = styled(Avatar)({  
  margin: `30px 0px 0px 0px`,  
  width: `32px`,  
  height: `32px`,  
});
  
const Avatar4 = styled(Avatar)({  
  margin: `30px 0px 0px 0px`,  
  width: `24px`,  
  height: `24px`,  
});
  
const Avatar5 = styled(Avatar)({  
  margin: `30px 0px 0px 0px`,  
  width: `40px`,  
  height: `40px`,  
});
  
const Avatar6 = styled(Avatar)({  
  margin: `30px 0px 0px 0px`,  
  width: `32px`,  
  height: `32px`,  
});
  
const Avatar7 = styled(Avatar)({  
  margin: `30px 0px 0px 0px`,  
  width: `24px`,  
  height: `24px`,  
});
  
const Avatar8 = styled(Avatar)({  
  margin: `30px 0px 0px 0px`,  
  width: `40px`,  
  height: `40px`,  
});
  
const Avatar9 = styled(Avatar)({  
  margin: `30px 0px 0px 0px`,  
  width: `32px`,  
  height: `32px`,  
});
  
const Avatar10 = styled(Avatar)({  
  margin: `30px 0px 0px 0px`,  
  width: `24px`,  
  height: `24px`,  
});
  
const Switch1 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px 0px 0px 30px`,  
});
  
const FormControlLabel24 = styled(FormControlLabel)({  
  margin: `0px`,  
});
  
const FormControlLabel25 = styled(FormControlLabel)({  
  margin: `30px 0px 0px 0px`,  
});
  
const FormControlLabel26 = styled(FormControlLabel)({  
  margin: `30px 0px 0px 0px`,  
});
  
const FormControlLabel27 = styled(FormControlLabel)({  
  margin: `30px 0px 0px 0px`,  
});
  
const FormControlLabel28 = styled(FormControlLabel)({  
  margin: `30px 0px 0px 0px`,  
});
  
const FormControlLabel29 = styled(FormControlLabel)({  
  margin: `30px 0px 0px 0px`,  
});
  
const FormControlLabel30 = styled(FormControlLabel)({  
  margin: `30px 0px 0px 0px`,  
});
  
const FormControlLabel31 = styled(FormControlLabel)({  
  margin: `30px 0px 0px 0px`,  
});
  
const FormControlLabel32 = styled(FormControlLabel)({  
  margin: `30px 0px 0px 0px`,  
});
  
const FormControlLabel33 = styled(FormControlLabel)({  
  margin: `30px 0px 0px 0px`,  
});
  
const FormControlLabel34 = styled(FormControlLabel)({  
  margin: `30px 0px 0px 0px`,  
});
  
const FormControlLabel35 = styled(FormControlLabel)({  
  margin: `30px 0px 0px 0px`,  
});
  
const FormControlLabel36 = styled(FormControlLabel)({  
  margin: `30px 0px 0px 0px`,  
});
  
const FormControlLabel37 = styled(FormControlLabel)({  
  margin: `30px 0px 0px 0px`,  
});
  
const FormControlLabel38 = styled(FormControlLabel)({  
  margin: `30px 0px 0px 0px`,  
});
  
const FormControlLabel39 = styled(FormControlLabel)({  
  margin: `30px 0px 0px 0px`,  
});
  
const FormControlLabel40 = styled(FormControlLabel)({  
  margin: `30px 0px 0px 0px`,  
});
  
const FormControlLabel41 = styled(FormControlLabel)({  
  margin: `30px 0px 0px 0px`,  
});
  
const FormControlLabel42 = styled(FormControlLabel)({  
  margin: `30px 0px 0px 0px`,  
});
  
const Table1 = styled(Table)(({ theme }) =>({  
  width: `600px`,  
  margin: `0px 0px 0px 30px`,  
}));
  
const Badge2 = styled(Badge1)(({ theme }) =>({  
  margin: `30px 0px 0px 0px`,  
}));
 
function Mui59Test(props) {
  return (
    <Mui59Test1 className={props.className} >
      <Top >
        <Alerts >
          <AlertFilled variant="filled" severity={"warning"}   > Alert content </AlertFilled>
          <AlertFilled1 variant="filled" severity={"error"}   > Description </AlertFilled1>
          <AlertFilled2 variant="filled" severity={"info"}   > Description </AlertFilled2>
          <AlertFilled3 variant="filled" severity={"success"}   > Description </AlertFilled3>
        </Alerts>
        <TextFields >
          <TextFieldStandard variant="standard" size="medium"  label={`Label`}    />
          <TextFieldStandard1 variant="standard" size="medium"  label={`Label`} helperText="Helper text"    />
          <TextFieldStandard2 variant="standard" size="medium"  label={`Label`} helperText="Helper text"    />
          <TextFieldFilled variant="filled" size="medium"  label={`Label`} helperText="Helper text" InputProps={{endAdornment: <InputAdornment position="end"><SvgIcon sx={{width: "24px", height: "24px"}} component = { RemoveRedEyeFilled1 } /></InputAdornment>}}   />
          <TextFieldFilled1 variant="filled" size="medium"  label={`Label`} helperText="Helper text" InputProps={{endAdornment: <InputAdornment position="end"><SvgIcon sx={{width: "24px", height: "24px"}} component = { RemoveRedEyeFilled2 } /></InputAdornment>}}   />
          <TextFieldOutlined variant="outlined" size="medium"  label={`Label`} helperText="Helper text"    />
          <TextFieldStandard3 variant="standard" size="medium"  label={`Label`} helperText="Helper text"    />
          <TextFieldFilled2 variant="filled" size="medium"  label={`Label`} helperText="Helper text"    />
          <TextFieldOutlined1 variant="outlined" size="medium"  label={`Label`} helperText="Helper text"    />
          <TextFieldStandard4 variant="standard" size="small"  label={`Label`} helperText="Helper text"    />
          <TextFieldOutlined2 variant="outlined" size="small"  label={`Label`} helperText="Helper text"    />
          <TextFieldFilled3 variant="filled" size="small"  label={`Label`} helperText="Helper text" InputProps={{endAdornment: <InputAdornment position="end"><SvgIcon sx={{width: "24px", height: "24px"}} component = { RemoveRedEyeFilled3 } /></InputAdornment>}}   />
          <TextFieldStandard5 variant="standard" size="small"  label={`Label`} helperText="Helper text"    />
          <TextFieldOutlined3 variant="outlined" size="small"  label={`Label`} helperText="Helper text"    />
          <TextFieldFilled4 variant="filled" size="small"  label={`Label`} helperText="Helper text"    />
        </TextFields>
        <Buttons >
          <ButtonContained variant="contained" size="large" color="primary"   endIcon={ <SvgIcon sx={{width: "18px", height: "22px"}} component = { ChevronRightFilled1 } />}  > Large </ButtonContained>
          <ButtonContained1 variant="contained" size="large" color="info"   endIcon={ <SvgIcon sx={{width: "18px", height: "22px"}} component = { ChevronRightFilled2 } />}  > Large </ButtonContained1>
          <ButtonContained2 variant="contained" size="large" color="info"   startIcon={ <SvgIcon sx={{width: "18px", height: "22px"}} component = { ChevronLeftFilled1 } />}  > Large </ButtonContained2>
          <ButtonContained3 variant="contained" size="large" color="success"    > Large </ButtonContained3>
          <ButtonText variant="text" size="large" color="primary"    > Large </ButtonText>
          <ButtonText1 variant="text" size="large" color="info"    > Large </ButtonText1>
          <ButtonText2 variant="text" size="large" color="info"    > Large </ButtonText2>
          <ButtonOutlined variant="outlined" size="large" color="primary"    > Large </ButtonOutlined>
          <ButtonOutlined1 variant="outlined" size="large" color="info"    > Large </ButtonOutlined1>
          <ButtonOutlined2 variant="outlined" size="large" color="success"    > Large </ButtonOutlined2>
          <ButtonOutlined3 variant="outlined" size="large" color="secondary"    > Large </ButtonOutlined3>
          <ButtonContained4 variant="contained" size="medium" color="secondary"    > Medium </ButtonContained4>
          <ButtonContained5 variant="contained" size="medium" color="warning"    > Medium </ButtonContained5>
          <ButtonText3 variant="text" size="medium" color="secondary"    > Medium </ButtonText3>
          <ButtonText4 variant="text" size="medium" color="warning"    > Medium </ButtonText4>
          <ButtonText5 variant="text" size="medium" color="success"    > Medium </ButtonText5>
          <ButtonOutlined4 variant="outlined" size="medium" color="error"    > Medium </ButtonOutlined4>
          <ButtonOutlined5 variant="outlined" size="medium" color="info"    > Medium </ButtonOutlined5>
          <ButtonContained6 variant="contained" size="small" color="error"    > Small </ButtonContained6>
          <ButtonText6 variant="text" size="small" color="error"    > Small </ButtonText6>
          <ButtonOutlined6 variant="outlined" size="small" color="warning"    > Small </ButtonOutlined6>
        </Buttons>
        <Icons >
          <Icon1    fontSize = { "medium"}  component = { StarFilled1}/>
          <Icon2    fontSize = { "large"}  component = { StarHalfFilled1}/>
          <Icon3    fontSize = { "small"}  component = { StarFilled2}/>
          <Icon4    fontSize = { "inherit"}  component = { ViewModuleFilled1}/>
        </Icons>
        <Links >
          <Link1 href="#" underline="always"  >Link</Link1>
          <Link2 href="#" underline="hover"  >Link</Link2>
          <Link3 href="#" underline="none"  >Link</Link3>
          <Link4 href="#" underline="always"  >Link</Link4>
          <Link5 href="#" underline="hover"  >Link</Link5>
          <Link6 href="#" underline="none"  >Link</Link6>
          <Link7 href="#" underline="none"  >Link</Link7>
        </Links>
        <AutoComplete >
          <Autocomplete1        autoHighlight disableClearable openOnFocus blurOnSelect   renderInput={(params) => ( <TextField variant="standard" {...params} fullWidth  label={`Label`}  /> )} />
          <Autocomplete2        autoHighlight disableClearable openOnFocus blurOnSelect   renderInput={(params) => ( <TextField variant="standard" {...params} fullWidth  label={`Label`}  /> )} />
          <Autocomplete3        autoHighlight disableClearable openOnFocus blurOnSelect   renderInput={(params) => ( <TextField variant="outlined" {...params} fullWidth  label={`Label`}  /> )} />
          <Autocomplete4        autoHighlight disableClearable openOnFocus blurOnSelect   renderInput={(params) => ( <TextField variant="filled" {...params} fullWidth  label={`Label`}  /> )} />
          <Autocomplete5        autoHighlight disableClearable openOnFocus blurOnSelect   renderInput={(params) => ( <TextField variant="outlined" {...params} fullWidth  label={`Label`}  /> )} />
          <Autocomplete6        autoHighlight disableClearable openOnFocus blurOnSelect   renderInput={(params) => ( <TextField variant="filled" {...params} fullWidth  label={`Label`}  /> )} />
        </AutoComplete>
      </Top>
      <Btm >
        <Checkboxes >
          <FormControlLabel1 control={<Checkbox defaultChecked={false} size="small" color="info" />} />
          <FormControlLabel2 control={<Checkbox defaultChecked={false} size="small" color="primary" />} label={`Label`} />
          <FormControlLabel3 control={<Checkbox defaultChecked={false} size="medium" color="primary" />} label={`Label`} />
          <FormControlLabel4 control={<Checkbox defaultChecked={false} size="medium" color="info" />} label={`Label`} />
          <FormControlLabel5 control={<Checkbox defaultChecked={false} size="medium" color="secondary" />} label={`Label`} />
          <FormControlLabel6 control={<Checkbox defaultChecked={false} size="medium" color="error" />} label={`Label`} />
          <FormControlLabel7 control={<Checkbox defaultChecked={false} size="medium" color="warning" />} label={`Label`} />
          <FormControlLabel8 control={<Checkbox defaultChecked={false} size="medium" color="info" />} label={`Label`} />
          <FormControlLabel9 control={<Checkbox defaultChecked={false} size="medium" color="success" />} label={`Label`} />
          <FormControlLabel10 control={<Checkbox defaultChecked={false} size="small" color="secondary" />} label={`Label`} />
          <FormControlLabel11 control={<Checkbox defaultChecked={false} size="small" color="error" />} label={`Label`} />
          <FormControlLabel12 control={<Checkbox defaultChecked={false} size="small" color="warning" />} label={`Label`} />
          <FormControlLabel13 control={<Checkbox defaultChecked={false} size="small" color="info" />} label={`Label`} />
          <FormControlLabel14 control={<Checkbox defaultChecked={false} size="small" color="success" />} label={`Label`} />
          <FormControlLabel15 control={<Checkbox defaultChecked={false} size="small" color="primary" />} label={`Label`} />
          <FormControlLabel16 control={<Checkbox defaultChecked={true} size="medium" color="primary" />} label={`Label`} />
          <FormControlLabel17 control={<Checkbox defaultChecked={false} size="medium" color="primary" />} label={`Label`} />
          <FormControlLabel18 control={<Checkbox defaultChecked={false} size="medium" color="secondary" />} label={`Label`} />
          <FormControlLabel19 control={<Checkbox defaultChecked={false} size="medium" color="error" />} label={`Label`} />
          <FormControlLabel20 control={<Checkbox defaultChecked={false} size="medium" color="warning" />} label={`Label`} />
          <FormControlLabel21 control={<Checkbox defaultChecked={false} size="medium" color="info" />} label={`Label`} />
          <FormControlLabel22 control={<Checkbox defaultChecked={false} size="medium" color="success" />} label={`Label`} />
          <FormControlLabel23 control={<Checkbox defaultChecked={false} size="medium" color="primary" />} label={`Label`} />
        </Checkboxes>
        <Avatar1 >
          <Avatar2 variant="circular" src={`hello/world/MUI59test_Avatar_8.png`} alt={"Avatar"}   />
          <Avatar3 variant="circular" src={`hello/world/MUI59test_Avatar_7.png`} alt={"Avatar"}   />
          <Avatar4 variant="circular" src={`hello/world/MUI59test_Avatar_6.png`} alt={"Avatar"}   />
          <Avatar5 variant="square" src={`hello/world/MUI59test_Avatar_5.png`} alt={"Avatar"}   />
          <Avatar6 variant="square" src={`hello/world/MUI59test_Avatar_4.png`} alt={"Avatar"}   />
          <Avatar7 variant="square" src={`hello/world/MUI59test_Avatar_3.png`} alt={"Avatar"}   />
          <Avatar8 variant="rounded" src={`hello/world/MUI59test_Avatar_2.png`} alt={"Avatar"}   />
          <Avatar9 variant="rounded" src={`hello/world/MUI59test_Avatar_1.png`} alt={"Avatar"}   />
          <Avatar10 variant="rounded" src={`hello/world/MUI59test_Avatar.png`} alt={"Avatar"}   />
        </Avatar1>
        <Switch1 >
          <FormControlLabel24 control={<Switch defaultChecked={false} color="info" size="medium" />} />
          <FormControlLabel25 control={<Switch defaultChecked={false} color="success" size="medium" />} />
          <FormControlLabel26 disabled={true} control={<Switch defaultChecked={false} disabled={true} color="info" size="medium" />} />
          <FormControlLabel27 control={<Switch defaultChecked={true} color="primary" size="medium" />} />
          <FormControlLabel28 control={<Switch defaultChecked={true} color="secondary" size="medium" />} />
          <FormControlLabel29 control={<Switch defaultChecked={true} color="error" size="medium" />} />
          <FormControlLabel30 control={<Switch defaultChecked={true} color="warning" size="medium" />} />
          <FormControlLabel31 control={<Switch defaultChecked={true} color="info" size="medium" />} />
          <FormControlLabel32 control={<Switch defaultChecked={true} color="success" size="medium" />} />
          <FormControlLabel33 control={<Switch defaultChecked={false} color="info" size="medium" />} label={"Label"} />
          <FormControlLabel34 control={<Switch defaultChecked={false} color="primary" size="medium" />} label={"Label"} />
          <FormControlLabel35 control={<Switch defaultChecked={true} color="primary" size="medium" />} label={"Label"} />
          <FormControlLabel36 disabled={true} control={<Switch defaultChecked={true} disabled={true} color="info" size="medium" />} label={"Label"} />
          <FormControlLabel37 control={<Switch defaultChecked={false} color="success" size="medium" />} label={"Label"} />
          <FormControlLabel38 control={<Switch defaultChecked={true} color="primary" size="medium" />} label={"Label"} />
          <FormControlLabel39 control={<Switch defaultChecked={true} color="secondary" size="medium" />} label={"Label"} />
          <FormControlLabel40 control={<Switch defaultChecked={true} color="error" size="medium" />} label={"Label"} />
          <FormControlLabel41 control={<Switch defaultChecked={true} color="warning" size="medium" />} label={"Label"} />
          <FormControlLabel42 control={<Switch defaultChecked={true} color="success" size="medium" />} label={"Label"} />
        </Switch1>
        <Table1   />
      </Btm>
      <Badge2   />
    </Mui59Test1>
  );
}

export default Mui59Test;
