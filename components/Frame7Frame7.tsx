/**********************************************************************
*
*   Component generated by Quest
*
*   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts. 
*   To preseve that abilty, always export from Quest to regenerate this file.
*   To setup props, bindings and actions, use the Quest editor
*   Code Logic goes in the hook associated with this component
*
*   For help and further details refer to: https://www.quest.ai/docs
*
*
**********************************************************************/

import { styled } from '@mui/material/styles';
import { Frame7Props } from '../../types';
import useFrame7 from './useFrame7';
 
const Frame71: any = styled("footer")({  
  backgroundColor: `rgba(255, 255, 255, 1)`,  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  width: "100%",  
  height: `432px`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  overflow: `hidden`,  
});
  
const Frame8: any = styled("div")({  
  border: `1px solid rgba(0, 0, 0, 1)`,  
  boxSizing: `border-box`,  
  display: `flex`,  
  position: `absolute`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `68px 33px`,  
  left: `53px`,  
  top: `87px`,  
});
  
const Hello: any = styled("div")(({ theme }: any) =>({  
  textAlign: `center`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 1)`,  
  fontStyle: theme.typography["Components"]["Button Large"].fontStyle,  
  fontFamily: theme.typography["Components"]["Button Large"].fontFamily,  
  fontWeight: theme.typography["Components"]["Button Large"].fontWeight,  
  fontSize: theme.typography["Components"]["Button Large"].fontSize,  
  letterSpacing: theme.typography["Components"]["Button Large"].letterSpacing,  
  textDecoration: theme.typography["Components"]["Button Large"].textDecoration,  
  lineHeight: theme.typography["Components"]["Button Large"].lineHeight,  
  textTransform: theme.typography["Components"]["Button Large"].textTransform,  
  margin: `0px`,  
}));
  
const Hello1: any = styled("div")(({ theme }: any) =>({  
  textAlign: `center`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 1)`,  
  fontStyle: theme.typography["Components"]["Button Large"].fontStyle,  
  fontFamily: theme.typography["Components"]["Button Large"].fontFamily,  
  fontWeight: theme.typography["Components"]["Button Large"].fontWeight,  
  fontSize: theme.typography["Components"]["Button Large"].fontSize,  
  letterSpacing: theme.typography["Components"]["Button Large"].letterSpacing,  
  textDecoration: theme.typography["Components"]["Button Large"].textDecoration,  
  lineHeight: theme.typography["Components"]["Button Large"].lineHeight,  
  textTransform: theme.typography["Components"]["Button Large"].textTransform,  
  margin: `0px 0px 0px 47px`,  
}));
 
function Frame7(props: Frame7Props): JSX.Element {
  const {data} = useFrame7();
  return (
    <Frame71 className={props.className} >
      {data.hello && data.hello.map((price: any, index: number) => {
        return (
          <Frame8 key={index} >
            <Hello >
              {`Hello`}
                </Hello>
            <Hello1 >
              {`Hello`}
                </Hello1>
          </Frame8>
        )
      })}
    </Frame71>
  );
}

export default Frame7;
